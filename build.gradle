buildscript {
  repositories {
    mavenCentral()
  }
}

plugins {
	id "com.jfrog.bintray" version "1.2"
	id "us.kirchmeier.capsule" version "1.0.2"
	id "com.diffplug.gradle.spotless" version "3.1.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'findbugs'


//***********************************************************************************
// JAVA CODE BUILDING

sourceSets
{
	main
	{
		java
		{ srcDir 'src' }
		resources
		{  srcDir 'src' }
	}
	test
	{
		java
		{ srcDir 'src' }
		resources
		{  srcDir 'src' }
	}
}

sourceCompatibility = 1.8

compileJava {
    options.compilerArgs << '-XDignore.symbol.file'
    options.fork = true // may not needed on 1.8
    options.forkOptions.executable = 'javac' // may not needed on 1.8
}

test
{
	testLogging.showStandardStreams = true
	testLogging
	{ events "passed", "skipped", "failed" }

	exclude '**/demo/**'
	exclude '**/run/**'

	maxHeapSize = "4G"
}

dependencies
{
	// BridJ:
	compile 'com.nativelibs4java:bridj:0.7.0'

	// JUnit:
	compile group: 'junit', name: 'junit', version: '4.11'
	testCompile group: 'junit', name: 'junit', version: '4.11'
}

repositories
{
	mavenCentral()
	maven
	{ url "http://oss.sonatype.org/content/groups/public" }
}


task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
	allprojects {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

//***********************************************************************************
// PUBLISHING

/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
	->
	try
  {
		def stdout = new ByteArrayOutputStream()
		exec {
			commandLine 'git', 'describe', '--tags'
			standardOutput = stdout
		}
		return stdout.toString().trim()
  }
  catch (Throwable e)
  {
  	println e
  }
}

group = 'net.coremem'
version = getVersionName()

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

apply from: 'gradle/bintrayUpload.gradle'

//***********************************************************************************
// GIT HOOKS:

apply from: 'gradle/install-git-hooks.gradle'

//***********************************************************************************
// SPOTLESS:

spotless {
    java {
        //licenseHeader '/* Licensed under Apache-2.0 */' // License header
 
        importOrder(['java', 'javax', 'com', 'org'])

        removeUnusedImports() // removes any unused imports

        eclipseFormatFile 'codeformat.eclipse.xml'  
    }
}


//***********************************************************************************
// FINDBUGS:

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
}











